class AFToast {
  constructor(message = "", type = "info", options = {}) {
    (this.message = message),
      (this.type = type),
      (this.options = options),
      (this.template = ""),
      this.toast();
  }
  toast() {
    return this.getOptions(), this.getLayoutType(), this.render();
  }
  getAlertTypeClasses() {
    return {
      labelIcon: "alert-label-icon",
      topBorder: "alert-top-border",
      labelArrow: "alert-label-icon label-arrow",
      roundedLabel: "alert-label-icon rounded-label",
      solid: "alert-solid",
      default: "",
      borderless: "alert-borderless",
      link: "alert-link",
      outline: "alert-outline",
      borderLeft: "alert-border-left",
    };
  }
  generate() {
    const alert = document.createElement(this.options.containertag);
    return (
      alert.setAttribute("role", "alert"),
      alert.insertAdjacentHTML("afterbegin", this.message),
      alert.classList.add("alert", "alert-" + this.type, "shadow"),
      (alert.dataset.aftoast = "toast"),
      this.options.layout &&
        (alert.classList +=
          " " + this.getAlertTypeClasses()["" + this.options.layout]),
      this.options.isDismissible &&
        (alert.classList.add("alert-dismissible", "fade", "show"),
        alert.insertAdjacentHTML(
          "beforeend",
          '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>'
        )),
      (this.template = alert),
      this
    );
  }
  render() {
    this.generate();
    const container = void 0;
    document
      .querySelector(this.options.container)
      .insertAdjacentElement("beforeend", this.template),
      this.options.duration &&
        setTimeout(() => {
          this.template.querySelector(".btn-close").click();
        }, this.options.duration);
  }
  getLayoutType() {
    const layoutTypes = [
      "labelIcon",
      "topBorder",
      "labelArrow",
      "roundedLabel",
      "solid",
      "default",
      "borderless",
      "link",
      "outline",
      "borderLeft",
    ];
    return (
      (this.options.layout = layoutTypes.includes(this.options.layout)
        ? this.options.layout
        : "default"),
      this
    );
  }
  getOptions() {
    return (
      (this.options.duration = this.options.duration ?? null),
      (this.options.container = this.options.container ?? "body"),
      (this.options.isDismissible = this.options.isDismissible ?? !1),
      (this.options.layout = this.options.layout ?? "roundedLabel"),
      (this.options.containertag = this.options.containertag ?? "div"),
      (this.options.container = this.options.container ?? "body"),
      this
    );
  }
}
